// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_practice/test/pages/animal/controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_practice/network/animal/model/animal.dart' as _i4;
import 'package:flutter_practice/pages/animal/repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AnimalImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimalImageRepository extends _i1.Mock
    implements _i2.AnimalImageRepository {
  @override
  _i3.Future<List<_i4.Animal>> getCats() => (super.noSuchMethod(
        Invocation.method(
          #getCats,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Animal>>.value(<_i4.Animal>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Animal>>.value(<_i4.Animal>[]),
      ) as _i3.Future<List<_i4.Animal>>);
  @override
  _i3.Future<List<_i4.Animal>> getDogs() => (super.noSuchMethod(
        Invocation.method(
          #getDogs,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Animal>>.value(<_i4.Animal>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Animal>>.value(<_i4.Animal>[]),
      ) as _i3.Future<List<_i4.Animal>>);
  @override
  _i3.Future<List<_i4.Animal>> getAnimals() => (super.noSuchMethod(
        Invocation.method(
          #getAnimals,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Animal>>.value(<_i4.Animal>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Animal>>.value(<_i4.Animal>[]),
      ) as _i3.Future<List<_i4.Animal>>);
}
